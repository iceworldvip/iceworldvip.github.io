---
layout: post
title: "DB分库分表"
date: 2018-01-06 23:05:30 +0800
tags: db
categories: Pattern
comments: true
published: true
---
### 数据切分
通过特定条件将数据库中的数据散列到多个数据库实例中，达到分散访问压力的效果。

数据根据指定规则切分不同类型，有两种切分方法。
1. 垂直切分，不同的表切分到不同的数据库实例
2. 水平切分，表中不同的数据按照规则，将同一表中的数据拆分到多台数据库实例中

#### 垂直切分
垂直切分的规则简单，实现起来简单，适合业务之间耦合度低且相互影响很小的业务系统。根据不同系统的模块进行表的拆分，分散到不同的数据库实例集群中。

#### 水平切分
水平切分的规则复杂的多，需要将同一个表中不同的分类的数据拆分到不同的数据库实例中，对于程序设计上，考虑无时无刻需要考虑分组规则。

## 切分方法分析
### 垂直切分
一个数据库实例由多个表构成，各个表被不同的业务模块使用，那么垂直切分就是将表进行分类，分散到不同的数据库实例中去，这样就很好的将请求压力分散到各个机器中。
![垂直切分](http://upload-images.jianshu.io/upload_images/2307987-6b0aadf54e8c517f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
系统已经拆分出了各个模块：用户系统、订单交易系统、支付系统

一个好的系统架构设计，一定是由各个小的业务模块组成，而且每个业务模块都有自己固定访问的若干数据表，在系统设计中，一定注意模块之间的交互统一起来，这样可以尽量避免复杂的交互减少对于其他业务数据中的依赖，同时也减少模块之间的耦合度。这样的系统实现数据表的垂直切分就更容易。

但是表的设计往往不能想模块设计一样独立性那么好，需要被多个模块访问，而且是连接查询的情况，这类表就需要权衡是否可以切分。系统前期的时候，往往会选择公用数据表的来解决，数据量快速发展到一定级别，往往会遇到瓶颈，就必须要做切分的梳理。

业务存在复杂的join的场景一般是非常难以切分的，对架构设计是一个挑战。

**优点**
* 拆分后业务清晰
* 系统之间耦合减少
* 易于系统扩展
* 数据维护简单

**缺点**
* 部分业务无法连接查询，只能通过接口获取数据，内存整合，提高系统的复杂度
* 事务处理复杂
* 还是会遇到单表过大的问题

垂直切分是根据业务拆分到不同的库，所以有些业务表过于庞大，存在数据库实例读写瓶颈的问题，只能通过水平切分来解决。

### 水平切分
水平拆分不是将表做分类，而且将数据表中的数据进行分类，并且散列到各个数据库实例的表中去。

![水平切分](http://upload-images.jianshu.io/upload_images/2307987-9a3bc4cbd0b5dfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

拆分数据就需要定义分片规则，关系型数据库是二维模型，原则需要找到合适拆分维度。例如：用户的类型，订单来源等等，这样相关的过程数据都需要根据这个维度进行拆分，就可以保证在同一个数据库实例中完成连接查询的操作。

**分片规则**
* 按照ID进行取模
* 按照日期
* 按照特定字段取模，或者根据特定范围

![image.png](http://upload-images.jianshu.io/upload_images/2307987-ff5a7cb389c7a427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

**优点**
* 可以做到连表查询
* 解决单表数据量过大问题
* 应用端改造相对较少
* 稳定性与负载能力提升

**缺点**
* 拆分规则抽象比较困难
* 分片事务一致性不好解决
* 数据多次扩展难度大
* 跨库连表查询性能不太好